#!/bin/bash

# start everything for a flesnet readout
# script is highly specialized to fit the needs of SPS 2016 beam test
# the script is not foolproof, think before you change something.

set -e
set -m  # run all processes in a separate process group

# debug
#set -v
#set -x

ROOT_DIR="$(git rev-parse --show-toplevel)"
BINDIR=.
LINK=(disable disable disable disable disable disable disable disable disable disable disable disable disable disable disable disable)
OUTFILE=./

case $1 in
    rec)
        if [ -z "$2" ]; then
            echo "please provide filename";
            exit
	else
            RECORD=true
            OUTFILE=$2
        fi
        ;;
    config)
        if [ -z "$2" ]; then
            echo "please provide config file";
            exit
	else
            EXT_CONF=true
            CONFFILE=$2
        fi
        ;;
    *)
        echo -e "To write data use $0 rec <filename>"
        echo -e "For extrenal config file use $0 config <filename>"
        ;;
esac

if [ "$EXT_CONF" = true ]; then
    source $CONFFILE
else

##### configuration below this line ########

# FLIB settings
ADDR[0]=01:00.0
#ADDR[1]=02:00.0

# FLIB 0
LINK[0]=pgen_near
LINK[1]=pgen_near
LINK[2]=pgen_near
LINK[3]=pgen_near
#LINK[4]=pgen_near
#LINK[5]=pgen_near
#LINK[6]=pgen_near
#LINK[7]=pgen_near

# FLIB 1
LINK[8]=pgen_near
LINK[9]=pgen_near
LINK[10]=pgen_near
LINK[11]=pgen_near
#LINK[12]=pgen_near
#LINK[13]=pgen_near
#LINK[14]=pgen_near
#LINK[15]=pgen_near

BASE_EQID[0]=0xF00
BASE_EQID[1]=0xF01

PGEN_RATE=1
#PGEN_RATE=0.14

# general setting

TIMESLICE_SIZE=100
OVERLAP_SIZE=1
OUTPUT_ARCHIVE_BYTES=2000000000
# leave empty for infinit running
MAX_TIMESLICES=

#TRANSPORT=RDMA
TRANSPORT=ZeroMQ

# Microslice size in ns and link max. thoughput in MB/s.
# These numbers are used to determine buffer sizes and should represent
# DPB settings. In case of FLIB pgen they are also used to configure the pgen.
MC_SIZE_NS=102400
#MC_SIZE_NS=1638400
MAX_THROUGHPUT_MB_S=1250

# Buffer calculations (absolute minimums):
# buffer_size_bytes = timeslice_size_bytes *2
# timeslice_size_bytes = mc_size_limit_bytes * (timeslice_size + overlap_size)
# min_mc_size_limit_bytes >= mc_size_time * max_throughput

MIN_MC_SIZE_LIMIT_BYTES=`echo "scale=0; ${MC_SIZE_NS}*${MAX_THROUGHPUT_MB_S}/1000" | bc -l`
echo "*** INFO *** min. mc size limit = $MIN_MC_SIZE_LIMIT_BYTES bytes"
#MC_SIZE_LIMIT_BYTES=$(($MIN_MC_SIZE_LIMIT_BYTES + 1000))
#MC_SIZE_LIMIT_BYTES=524288
MC_SIZE_LIMIT_BYTES=2097152
echo "*** INFO *** mc size limit set = $MC_SIZE_LIMIT_BYTES bytes"

MIN_BUF_SIZE=`echo "2 * $MC_SIZE_LIMIT_BYTES * ($TIMESLICE_SIZE + $OVERLAP_SIZE)" | bc`
# calculate next base2 exponent for given arg1
MIN_BUF_SIZE_EXP=`echo "exp=l($MIN_BUF_SIZE-1)/l(2); scale=0; exp/1+1" | bc -l`
echo "*** INFO *** abs. min. buffer size per link = 2^$MIN_BUF_SIZE_EXP bytes"
#BUF_SIZE_EXP=$MIN_BUF_SIZE_EXP
#BUF_SIZE_EXP=27
BUF_SIZE_EXP=28
echo "*** INFO *** buffer size per link set = 2^$BUF_SIZE_EXP bytes"
##### configuration above this line ########
fi # EXT_CONF


if [ "$RECORD" = true ]; then
    TS_PROCESSOR="./tsclient -c%i -s%s -L tsclient.log -a --output-archive-bytes $OUTPUT_ARCHIVE_BYTES -o ${OUTFILE}%n.tsa"
else
    TS_PROCESSOR="./tsclient -c%i -s%s -L tsclient.log -a"
fi

FLESNET_CFG=(-l 2
             -t $TRANSPORT
             --timeslice-size $TIMESLICE_SIZE
             --processor-instances 1)
if [ ! -z "$MAX_TIMESLICES" ]; then
    FLESNET_CFG+=(--max-timeslice-number $MAX_TIMESLICES)
fi

############################################

declare -a SERVER_PID
declare -a EN_PID

# building the config
TOTAL_LINKS=0
declare -a IN_INDEX
declare -a NODES
for flib in ${!ADDR[*]}; do
    for ((channel=0; channel<8; channel++)); do
        i=$((flib*8+channel))
        if [ ${LINK[$i]} != disable ]; then
            NODES+=(-I shm://127.0.0.1/shm_server_f$flib/$channel?overlap=$OVERLAP_SIZE)
            IN_INDEX+=(-i $TOTAL_LINKS)
            ((TOTAL_LINKS += 1))
        fi
    done
done

cleanup () {
    echo "cleaning up ..."
    # kill all procecces in this session
    pkill -9 -s $SID flesnet
    pkill -9 -s $SID tsclient
    pkill -9 -s $SID en_readout
    pkill -9 -s $SID flib_server
    rm /dev/shm/flesnet*
    exit -1
}

# the shutdown procedure
end_readout () {
    set +e
    echo "*** SHUTTING DOWN ***"
    for flib in ${!ADDR[*]}; do
        kill -s SIGINT ${EN_PID[$flib]} 2>/dev/null
    done
    sleep 2
    if [ -z "$MAX_TIMESLICES" ]; then
        kill -s SIGINT $FLESNET_CN_PID
    fi
    ## end IN in case of zmq
    if [ $TRANSPORT == ZeroMQ ]; then
        kill -s SIGINT $FLESNET_IN_PID 2>/dev/null
    fi
    sleep 1
    for flib in ${!ADDR[*]}; do
        kill -s SIGINT ${SERVER_PID[$flib]} 2>/dev/null
    done
    sleep 1
    # check if any process is left
    if kill -0 $FLESNET_IN_PID > /dev/null 2>&1 ||
       kill -0 $FLESNET_CN_PID > /dev/null 2>&1 ; then
        cleanup
    fi
    for flib in ${!ADDR[*]}; do
        if kill -0 ${EN_PID[$flib]} > /dev/null 2>&1 ||
           kill -0 ${SERVER_PID[$flib]} > /dev/null 2>&1 ; then
            cleanup
        fi
    done
    exit 0
}
trap end_readout SIGINT SIGTERM SIGHUP


echo "Starting readout ..."
# ensure everything is fine
$ROOT_DIR/contrib/flesnet-check

$BINDIR/flib_info > ${OUTFILE}flib_info.log

echo "Configuring FLIBs ..."
# round up to next possible size (given mc_size is min. size)
#PGEN_MC_SIZE=`echo "scale=0; (${MC_SIZE_NS}+1024-1)/1024" | bc -l`
# round down to next possible size (given mc_size is max. size)
PGEN_MC_SIZE=`echo "scale=0; ${MC_SIZE_NS}/1024" | bc -l`
for i in ${!ADDR[*]}; do
    $BINDIR/flib_cfg -c /dev/null -l 2 -L ${OUTFILE}f${i}_cfg.log -i ${ADDR[$i]} \
                     -t $PGEN_MC_SIZE -r $PGEN_RATE \
                     --mc-size-limit $MC_SIZE_LIMIT_BYTES \
                     --l0_source ${LINK[0+$i*8]} --l0_eq_id ${BASE_EQID[$i]}0 \
                     --l1_source ${LINK[1+$i*8]} --l1_eq_id ${BASE_EQID[$i]}1 \
                     --l2_source ${LINK[2+$i*8]} --l2_eq_id ${BASE_EQID[$i]}2 \
                     --l3_source ${LINK[3+$i*8]} --l3_eq_id ${BASE_EQID[$i]}3 \
                     --l4_source ${LINK[4+$i*8]} --l4_eq_id ${BASE_EQID[$i]}4 \
                     --l5_source ${LINK[5+$i*8]} --l5_eq_id ${BASE_EQID[$i]}5 \
                     --l6_source ${LINK[6+$i*8]} --l6_eq_id ${BASE_EQID[$i]}6 \
                     --l7_source ${LINK[7+$i*8]} --l7_eq_id ${BASE_EQID[$i]}7
done


echo "Starting flib_server ..."
for flib in ${!ADDR[*]}; do
    $BINDIR/flib_server -c /dev/null -L ${OUTFILE}f${flib}_server.log -i ${ADDR[$flib]} \
                        --data-buffer-size-exp $BUF_SIZE_EXP -o shm_server_f$flib &
    SERVER_PID+=($!)
done
 
# block till server is ready (remove if etcd is ready)
sleep 1
for flib in ${!ADDR[*]}; do
    tail -f ${OUTFILE}f${flib}_server.log | while read LOGLINE
    do
        [[ "${LOGLINE}" == *"flib server started and running"* ]] && pkill -P $$ tail
    done
done


# flesnet configuration
FLESNET_PRIV_CFG=(-e "$TS_PROCESSOR")
FLESNET_PRIV_CFG+=("${FLESNET_CFG[@]}")

CN_INDEX=(-o 0)
NODES+=(-O shm://127.0.0.1/shm_flesnet_?datasize=$BUF_SIZE_EXP)

IN_CFG=(-L ${OUTFILE}flesnet_in.log)

echo "Starting flesnet ..."

# the compute node
$BINDIR/flesnet -L ${OUTFILE}flesnet_cn.log "${FLESNET_PRIV_CFG[@]}" "${NODES[@]}" "${CN_INDEX[@]}" &
FLESNET_CN_PID=$!

# get flesnet group ID
SID=$(ps o sid -p $FLESNET_CN_PID | tail -n1)

# the input nodes
$BINDIR/flesnet "${FLESNET_PRIV_CFG[@]}" "${NODES[@]}" "${IN_INDEX[@]}" "${IN_CFG[@]}" &
FLESNET_IN_PID=$!

# enable readout
sleep 1
for flib in ${!ADDR[*]}; do
    $BINDIR/en_readout $flib > ${OUTFILE}flib${flib}_info.log &
    EN_PID+=($!)
done

if [ ! -z "$MAX_TIMESLICES" ]; then
    wait $FLESNET_CN_PID
    end_readout
else
    wait
fi
echo "*** END ***"
